Week 1

- Student introductions
--- Where you work
--- Background in DA
--- What you hope to get from this course



goals of text mining

- Summarize documents (document summarization)
- Assess positive/negative sentiment of documents (sentiment analysis)
- Text classification (Kaggle spam filter competition)
- Generate new text (text prediction)
- Extract topics in a document (topic modeling)
- Extract people, places, organizations, etc. named in a document (named entity recognition)
- Identify nouns, verbs, etc. (parts of speech tagging)

- Text mining is often very unsupervised
--- supervised vs unsupervised (describe work required to process data such that supervised algorithms can be used)
--- This leads into making a clear delineation between the outcomes delivered in online tutorials and the outcomes seen in reality
--- set expectations of what NLP can do (and what is cannot do)


Language models

- Understanding "nuance" in language
-- Nuance comes relatively easily for humans
-- Examples of nuance: 
	Pope's baby steps on gays
	Inside jokes
	colloquialisms: Is it soda or pop or coke?
	sarcasm
-- Use a different term for this class: localized language
--- Examples of localized language
	Friend groups often have their own language (inside jokes)
	Churches have their own terms
	Businesses 
	"Local" doesn't just refer to geography or a distance
	Think about newcomers to the military and the difficulty they have in understanding all of the jargon and acronyms that they hear
-- Localized language can cause problems in text mining
-- Ultimately want to move from local meaning to global meaning
	Turns out that the word "warfighter" is interpreted as being very negative by most sentiment analysis algorithms
	In the military context "warfighter" has a neutral sentiment
	We can move to a more global meaning by changing "warfighter" to "customer" or some other term that reflects the same intent. 

We have to collect much more text data to create a language model that can pick up on this nuances

- Suppose we want to replace all instances of "warfighter" with "customer" in a collection of comments obtained from a survey. 
--- Turns out not everyone spells "warfighter" the same way

	"warfighter"
	"Warfighter"
	"war fighter"
	"War fighter"
	"War Fighter"
	"war-fighter"
	"War-fighter"
	"War-Fighter"

We'd want to make sure that we catch all of the different variations using a regular expression such as [Ww]ar(\\s*)(-?)[Ff]ighter

determine  To find and How would we 


text storage formats
- PDF
- Office (.doc, .docx, .ppt, .pptx)
- images (.png, .jpeg, .pdf)
- text files (.txt)
- row-column (.csv)